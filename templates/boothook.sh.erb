#!/bin/bash

# (c) Copyright 2014 Hewlett-Packard Development Company, L.P.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
function GetOs
{
  python -c "
import platform
import sys

def linux_distribution():
  try:
    return platform.linux_distribution()
  except:
    return "N/A"


print(str(platform.linux_distribution()[0]))
"
}

# make sure we have good dns
# install puppet agent from maestro, first try github then try review.forj.io
# we provide an option META_INSTALL_PUPPET_URL for specifying an alternative
# puppet url to use for installing pupppet.
function INSTALL_PUPPET
{
  _meta_install_puppet_url=<%= @META_INSTALL_PUPPET_URL %>
  if [ -z "${_meta_install_puppet_url}" ]; then
    dig raw.githubusercontent.com
    if [ $? -eq 0 ] ; then
      curl https://raw.githubusercontent.com/forj-oss/maestro/master/puppet/install_puppet.sh | bash -xe
    else
      curl https://review.forj.io/gitweb?p=forj-oss/maestro.git;a=blob_plain;f=puppet/install_puppet.sh;h=da0f9808379e18a0dbbba20a9bcec8f1947e2d71;hb=HEAD | bash -xe
    fi
  else
    curl $_meta_install_puppet_url | bash -xe
  fi
}

exec 6>&1 # Save stdout
exec > >(tee -a /var/log/cloud-init.log)
exec 2>&1

echo "################# BOOTHOOK Start ########################"
set -x


#
# Proxy management
#
_PROXY=<%= @http_proxy %>
if [ -n "$_PROXY" ] && [ "$(grep -i http_proxy /etc/environment)" = "" ]
then
    echo "export HTTP_PROXY=$_PROXY
export http_proxy=$_PROXY
export HTTPS_PROXY=$_PROXY
export https_proxy=$_PROXY
export FTP_PROXY=$_PROXY
export no_proxy=localhost,127.0.0.1,10.0.0.1,169.254.169.254" >> /etc/environment
source /etc/environment

case  "$(GetOs)" in
  Ubuntu)

    if [ ! -f /etc/apt/apt.conf ]; then
      echo "Acquire::http::proxy \"$_PROXY\";
Acquire::https::proxy \"$_PROXY\";
Acquire::ftp::proxy \"$_PROXY\";"  >/etc/apt/apt.conf
    fi
    ;;
  CentOS)
    if [ -f /etc/yum.conf ]; then
      grep "proxy=$_PROXY" /etc/yum.conf > /dev/null 2<&1
      if [ ! $? -eq 0 ]; then
        echo "proxy=$_PROXY" >>/etc/yum.conf
      fi
    fi
    ;;
  *)
    ;;
  esac
fi
set +x
#
# Hostname configuration
# site_name example = util.ch
# domain example = .ch.forj.io
#
_SITE=<%= @site_name %>
_HOSTNAME=$(echo $_SITE | awk -F'.' '{print $1}')
_INSTANCE_DOMAIN=<%= @domain %>
_FQDN=$_HOSTNAME.$_INSTANCE_DOMAIN

echo $_FQDN > /etc/hostname
cat /etc/hosts| grep "^127.0.0.1 ${_FQDN} ${_HOSTNAME}" > /dev/null 2<&1
if [ ! $? -eq 0 ]; then
   HOSTSTR=$(echo "127.0.0.1 ${_FQDN} ${_HOSTNAME}")
   bash -c 'echo '"$HOSTSTR"' >> /etc/hosts'
fi
hostname  -F /etc/hostname
cat /etc/hostname

#
# maestro to /etc/hosts
#
_PUPPET_MASTER_IP=<% if defined?(@helion_public_ipv4) %><%= @helion_public_ipv4 %><% elsif defined?(@ec2_public_ipv4) %><%= @ec2_public_ipv4 %><% else %><%= @ipaddress %><% end %>
_PUPPET_MASTER=<%= @hostname %>
_PUPPET_MASTER_FQDN=<%= @fqdn %>

cat /etc/hosts|grep "^$_PUPPET_MASTER_IP" > /dev/null 2<&1
if [ ! $? -eq 0 ]; then
   HOSTSTR=$(echo "$_PUPPET_MASTER_IP $_PUPPET_MASTER_FQDN $_PUPPET_MASTER salt")
   bash -c 'echo '"$HOSTSTR"'>> /etc/hosts'
fi

#
# OS specific finetuning
# we minimally need curl
case  "$(GetOs)" in
  Ubuntu)
    # remove the ability from dhclient to update doamin and search parameters
    cp /etc/dhcp/dhclient.conf /etc/dhcp/dhclient.conf.bak
    sed -e "s/domain-name, domain-name-servers, domain-search, host-name,/domain-name-servers,/" /etc/dhcp/dhclient.conf --in-place
    sed -i -e \
          's,^archive.ubuntu.com/ubuntu,nova.clouds.archive.ubuntu.com/ubuntu,g'  \
           /etc/apt/sources.list 

    apt-get -qy update
    apt-get -y install curl

    # on ubuntu
    # base line package install
    PUPPET_PACKAGES='"git", "libtool", "curl", "wget", "bison" , "python-novaclient", "build-essential", "openssl",
        "unzip", "gcc", "make", "perl", "cpio" , "patch", "autoconf",
        "bzip2", "tcpdump", "strace", "python-paramiko", "libxslt-dev"'
    ;;
  CentOS)
    yum -y install http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm
    yum -y install curl

    # on dentos
    # base line package install
    PUPPET_PACKAGES='"git", "wget", "libtool", "curl", "bison" , "python-novaclient", "kernel-devel", "openssl",
    "unzip", "gcc", "gcc-c++", "make", "perl", "cpio" , "patch", "autoconf",
    "bzip2", "tcpdump", "strace", "python-paramiko", "libxslt-devel"'
    ;;
  *)
    ;;
esac    

#
# setup metadata
#
echo '<%= @metadata %>' > /meta.js

#
# setup puppet using external resource.
#
INSTALL_PUPPET

#
# install os base packages
#
echo 'node default {
    notice("setup ${::fqdn}")
    $pkgs = [ ${PUPPET_PACKAGES} ]
    package { $pkgs: ensure => present }
}' > build_proto.pp
puppet apply --modulepath=/etc/puppet/modules/:. build_proto.pp

set +x
echo "################# BOOTHOOK End ##########################"
exec 1>&6 6>&-
echo "*************************** NO MORE OUTPUT to log file"
